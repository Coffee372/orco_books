// Generated by https://quicktype.io

// Converts JSON strings to/from your types
// and asserts the results of JSON.parse at runtime
function toTest(json) {
    return cast(JSON.parse(json), r("Test"));
}

function testToJson(value) {
    return JSON.stringify(uncast(value, r("Test")), null, 2);
}

function invalidValue(typ, val) {
    throw Error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`);
}

function jsonToJSProps(typ) {
    if (typ.jsonToJS === undefined) {
        var map = {};
        typ.props.forEach((p) => map[p.json] = { key: p.js, typ: p.typ });
        typ.jsonToJS = map;
    }
    return typ.jsonToJS;
}

function jsToJSONProps(typ) {
    if (typ.jsToJSON === undefined) {
        var map = {};
        typ.props.forEach((p) => map[p.js] = { key: p.json, typ: p.typ });
        typ.jsToJSON = map;
    }
    return typ.jsToJSON;
}

function transform(val, typ, getProps) {
    function transformPrimitive(typ, val) {
        if (typeof typ === typeof val) return val;
        return invalidValue(typ, val);
    }

    function transformUnion(typs, val) {
        // val must validate against one typ in typs
        var l = typs.length;
        for (var i = 0; i < l; i++) {
            var typ = typs[i];
            try {
                return transform(val, typ, getProps);
            } catch (_) { }
        }
        return invalidValue(typs, val);
    }

    function transformEnum(cases, val) {
        if (cases.indexOf(val) !== -1) return val;
        return invalidValue(cases, val);
    }

    function transformArray(typ, val) {
        // val must be an array with no invalid elements
        if (!Array.isArray(val)) return invalidValue("array", val);
        return val.map(el => transform(el, typ, getProps));
    }

    function transformObject(props, additional, val) {
        if (val === null || typeof val !== "object" || Array.isArray(val)) {
            return invalidValue("object", val);
        }
        var result = {};
        Object.getOwnPropertyNames(props).forEach(key => {
            const prop = props[key];
            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;
            result[prop.key] = transform(v, prop.typ, getProps);
        });
        Object.getOwnPropertyNames(val).forEach(key => {
            if (!Object.prototype.hasOwnProperty.call(props, key)) {
                result[key] = transform(val[key], additional, getProps);
            }
        });
        return result;
    }

    if (typ === "any") return val;
    if (typ === null) {
        if (val === null) return val;
        return invalidValue(typ, val);
    }
    if (typ === false) return invalidValue(typ, val);
    while (typeof typ === "object" && typ.ref !== undefined) {
        typ = typeMap[typ.ref];
    }
    if (Array.isArray(typ)) return transformEnum(typ, val);
    if (typeof typ === "object") {
        return typ.hasOwnProperty("unionMembers") ? transformUnion(typ.unionMembers, val)
            : typ.hasOwnProperty("arrayItems") ? transformArray(typ.arrayItems, val)
                : typ.hasOwnProperty("props") ? transformObject(getProps(typ), typ.additional, val)
                    : invalidValue(typ, val);
    }
    return transformPrimitive(typ, val);
}

function cast(val, typ) {
    return transform(val, typ, jsonToJSProps);
}

function uncast(val, typ) {
    return transform(val, typ, jsToJSONProps);
}

function a(typ) {
    return { arrayItems: typ };
}

function u(...typs) {
    return { unionMembers: typs };
}

function o(props, additional) {
    return { props, additional };
}

function m(additional) {
    return { props: [], additional };
}

function r(name) {
    return { ref: name };
}

const typeMap = {
    "Test": o([
        { json: "title", js: "title", typ: "" },
        { json: "body", js: "body", typ: r("Body") },
        { json: "documentStyle", js: "documentStyle", typ: r("DocumentStyle") },
        { json: "namedStyles", js: "namedStyles", typ: r("NamedStyles") },
        { json: "revisionId", js: "revisionId", typ: "" },
        { json: "suggestionsViewMode", js: "suggestionsViewMode", typ: "" },
        { json: "inlineObjects", js: "inlineObjects", typ: m(r("InlineObject")) },
        { json: "documentId", js: "documentId", typ: "" },
    ], false),
    "Body": o([
        { json: "content", js: "content", typ: a(r("BodyContent")) },
    ], false),
    "BodyContent": o([
        { json: "endIndex", js: "endIndex", typ: 0 },
        { json: "sectionBreak", js: "sectionBreak", typ: u(undefined, r("SectionBreak")) },
        { json: "startIndex", js: "startIndex", typ: u(undefined, 0) },
        { json: "paragraph", js: "paragraph", typ: u(undefined, r("PurpleParagraph")) },
        { json: "table", js: "table", typ: u(undefined, r("PurpleTable")) },
    ], false),
    "PurpleParagraph": o([
        { json: "elements", js: "elements", typ: a(r("PurpleElement")) },
        { json: "paragraphStyle", js: "paragraphStyle", typ: r("PurpleParagraphStyle") },
    ], false),
    "PurpleElement": o([
        { json: "startIndex", js: "startIndex", typ: 0 },
        { json: "endIndex", js: "endIndex", typ: 0 },
        { json: "textRun", js: "textRun", typ: u(undefined, r("PurpleTextRun")) },
        { json: "inlineObjectElement", js: "inlineObjectElement", typ: u(undefined, r("PurpleInlineObjectElement")) },
    ], false),
    "PurpleInlineObjectElement": o([
        { json: "inlineObjectId", js: "inlineObjectId", typ: "" },
        { json: "textStyle", js: "textStyle", typ: r("PurpleTextStyle") },
    ], false),
    "PurpleTextStyle": o([
        { json: "bold", js: "bold", typ: true },
        { json: "italic", js: "italic", typ: true },
        { json: "underline", js: "underline", typ: true },
        { json: "strikethrough", js: "strikethrough", typ: true },
        { json: "smallCaps", js: "smallCaps", typ: true },
        { json: "backgroundColor", js: "backgroundColor", typ: r("CropPropertiesClass") },
        { json: "foregroundColor", js: "foregroundColor", typ: r("ForegroundColorClass") },
        { json: "fontSize", js: "fontSize", typ: r("MarginBottom") },
        { json: "weightedFontFamily", js: "weightedFontFamily", typ: r("WeightedFontFamily") },
        { json: "baselineOffset", js: "baselineOffset", typ: r("ColumnSeparatorStyle") },
    ], false),
    "CropPropertiesClass": o([
    ], false),
    "MarginBottom": o([
        { json: "magnitude", js: "magnitude", typ: u(undefined, 3.14) },
        { json: "unit", js: "unit", typ: r("Unit") },
    ], false),
    "ForegroundColorClass": o([
        { json: "color", js: "color", typ: r("ColorColor") },
    ], false),
    "ColorColor": o([
        { json: "rgbColor", js: "rgbColor", typ: r("CropPropertiesClass") },
    ], false),
    "WeightedFontFamily": o([
        { json: "fontFamily", js: "fontFamily", typ: r("FontFamily") },
        { json: "weight", js: "weight", typ: 0 },
    ], false),
    "PurpleTextRun": o([
        { json: "content", js: "content", typ: "" },
        { json: "textStyle", js: "textStyle", typ: r("FluffyTextStyle") },
    ], false),
    "FluffyTextStyle": o([
        { json: "bold", js: "bold", typ: u(undefined, true) },
        { json: "italic", js: "italic", typ: u(undefined, true) },
        { json: "underline", js: "underline", typ: u(undefined, true) },
        { json: "strikethrough", js: "strikethrough", typ: u(undefined, true) },
        { json: "smallCaps", js: "smallCaps", typ: u(undefined, true) },
        { json: "backgroundColor", js: "backgroundColor", typ: u(undefined, r("CropPropertiesClass")) },
        { json: "foregroundColor", js: "foregroundColor", typ: u(undefined, r("GroundColor")) },
        { json: "fontSize", js: "fontSize", typ: u(undefined, r("MarginBottom")) },
        { json: "weightedFontFamily", js: "weightedFontFamily", typ: u(undefined, r("WeightedFontFamily")) },
        { json: "baselineOffset", js: "baselineOffset", typ: u(undefined, r("ColumnSeparatorStyle")) },
    ], false),
    "GroundColor": o([
        { json: "color", js: "color", typ: r("BackgroundColorColor") },
    ], false),
    "BackgroundColorColor": o([
        { json: "rgbColor", js: "rgbColor", typ: r("RGBColor") },
    ], false),
    "RGBColor": o([
        { json: "red", js: "red", typ: u(undefined, 3.14) },
        { json: "green", js: "green", typ: u(undefined, 3.14) },
        { json: "blue", js: "blue", typ: u(undefined, 3.14) },
    ], false),
    "PurpleParagraphStyle": o([
        { json: "namedStyleType", js: "namedStyleType", typ: r("NamedStyleType") },
        { json: "alignment", js: "alignment", typ: u(undefined, "") },
        { json: "lineSpacing", js: "lineSpacing", typ: u(undefined, 0) },
        { json: "direction", js: "direction", typ: r("Direction") },
        { json: "spacingMode", js: "spacingMode", typ: u(undefined, "") },
        { json: "spaceAbove", js: "spaceAbove", typ: u(undefined, r("IndentEnd")) },
        { json: "spaceBelow", js: "spaceBelow", typ: u(undefined, r("MarginBottom")) },
        { json: "borderBetween", js: "borderBetween", typ: r("Border") },
        { json: "borderTop", js: "borderTop", typ: r("Border") },
        { json: "borderBottom", js: "borderBottom", typ: r("Border") },
        { json: "borderLeft", js: "borderLeft", typ: r("Border") },
        { json: "borderRight", js: "borderRight", typ: r("Border") },
        { json: "indentFirstLine", js: "indentFirstLine", typ: u(undefined, r("IndentEnd")) },
        { json: "indentStart", js: "indentStart", typ: u(undefined, r("IndentEnd")) },
        { json: "indentEnd", js: "indentEnd", typ: u(undefined, r("IndentEnd")) },
        { json: "keepLinesTogether", js: "keepLinesTogether", typ: u(undefined, true) },
        { json: "keepWithNext", js: "keepWithNext", typ: u(undefined, true) },
        { json: "avoidWidowAndOrphan", js: "avoidWidowAndOrphan", typ: u(undefined, true) },
        { json: "shading", js: "shading", typ: r("Shading") },
    ], false),
    "Border": o([
        { json: "color", js: "color", typ: r("CropPropertiesClass") },
        { json: "width", js: "width", typ: r("IndentEnd") },
        { json: "padding", js: "padding", typ: u(undefined, r("IndentEnd")) },
        { json: "dashStyle", js: "dashStyle", typ: r("DashStyle") },
    ], false),
    "IndentEnd": o([
        { json: "unit", js: "unit", typ: r("Unit") },
    ], false),
    "Shading": o([
        { json: "backgroundColor", js: "backgroundColor", typ: r("CropPropertiesClass") },
    ], false),
    "SectionBreak": o([
        { json: "sectionStyle", js: "sectionStyle", typ: r("SectionStyle") },
    ], false),
    "SectionStyle": o([
        { json: "columnSeparatorStyle", js: "columnSeparatorStyle", typ: r("ColumnSeparatorStyle") },
        { json: "contentDirection", js: "contentDirection", typ: r("Direction") },
    ], false),
    "PurpleTable": o([
        { json: "rows", js: "rows", typ: 0 },
        { json: "columns", js: "columns", typ: 0 },
        { json: "tableRows", js: "tableRows", typ: a(r("PurpleTableRow")) },
        { json: "tableStyle", js: "tableStyle", typ: r("TableStyle") },
    ], false),
    "PurpleTableRow": o([
        { json: "startIndex", js: "startIndex", typ: 0 },
        { json: "endIndex", js: "endIndex", typ: 0 },
        { json: "tableCells", js: "tableCells", typ: a(r("PurpleTableCell")) },
        { json: "tableRowStyle", js: "tableRowStyle", typ: r("TableRowStyle") },
    ], false),
    "PurpleTableCell": o([
        { json: "startIndex", js: "startIndex", typ: 0 },
        { json: "endIndex", js: "endIndex", typ: 0 },
        { json: "content", js: "content", typ: a(r("PurpleContent")) },
        { json: "tableCellStyle", js: "tableCellStyle", typ: r("FluffyTableCellStyle") },
    ], false),
    "PurpleContent": o([
        { json: "startIndex", js: "startIndex", typ: 0 },
        { json: "endIndex", js: "endIndex", typ: 0 },
        { json: "paragraph", js: "paragraph", typ: u(undefined, r("FluffyParagraph")) },
        { json: "table", js: "table", typ: u(undefined, r("FluffyTable")) },
    ], false),
    "FluffyParagraph": o([
        { json: "elements", js: "elements", typ: a(r("PurpleElement")) },
        { json: "paragraphStyle", js: "paragraphStyle", typ: r("FluffyParagraphStyle") },
    ], false),
    "FluffyParagraphStyle": o([
        { json: "namedStyleType", js: "namedStyleType", typ: r("NamedStyleType") },
        { json: "alignment", js: "alignment", typ: u(undefined, "") },
        { json: "lineSpacing", js: "lineSpacing", typ: u(undefined, 0) },
        { json: "direction", js: "direction", typ: r("Direction") },
        { json: "spacingMode", js: "spacingMode", typ: u(undefined, "") },
        { json: "spaceAbove", js: "spaceAbove", typ: u(undefined, r("IndentEnd")) },
        { json: "spaceBelow", js: "spaceBelow", typ: u(undefined, r("IndentEnd")) },
        { json: "borderBetween", js: "borderBetween", typ: r("Border") },
        { json: "borderTop", js: "borderTop", typ: r("Border") },
        { json: "borderBottom", js: "borderBottom", typ: r("Border") },
        { json: "borderLeft", js: "borderLeft", typ: r("Border") },
        { json: "borderRight", js: "borderRight", typ: r("Border") },
        { json: "indentFirstLine", js: "indentFirstLine", typ: u(undefined, r("IndentEnd")) },
        { json: "indentStart", js: "indentStart", typ: u(undefined, r("IndentEnd")) },
        { json: "indentEnd", js: "indentEnd", typ: u(undefined, r("IndentEnd")) },
        { json: "keepLinesTogether", js: "keepLinesTogether", typ: u(undefined, true) },
        { json: "keepWithNext", js: "keepWithNext", typ: u(undefined, true) },
        { json: "avoidWidowAndOrphan", js: "avoidWidowAndOrphan", typ: u(undefined, true) },
        { json: "shading", js: "shading", typ: r("Shading") },
    ], false),
    "FluffyTable": o([
        { json: "rows", js: "rows", typ: 0 },
        { json: "columns", js: "columns", typ: 0 },
        { json: "tableRows", js: "tableRows", typ: a(r("FluffyTableRow")) },
        { json: "tableStyle", js: "tableStyle", typ: r("TableStyle") },
    ], false),
    "FluffyTableRow": o([
        { json: "startIndex", js: "startIndex", typ: 0 },
        { json: "endIndex", js: "endIndex", typ: 0 },
        { json: "tableCells", js: "tableCells", typ: a(r("FluffyTableCell")) },
        { json: "tableRowStyle", js: "tableRowStyle", typ: r("TableRowStyle") },
    ], false),
    "FluffyTableCell": o([
        { json: "startIndex", js: "startIndex", typ: 0 },
        { json: "endIndex", js: "endIndex", typ: 0 },
        { json: "content", js: "content", typ: a(r("FluffyContent")) },
        { json: "tableCellStyle", js: "tableCellStyle", typ: r("PurpleTableCellStyle") },
    ], false),
    "FluffyContent": o([
        { json: "startIndex", js: "startIndex", typ: 0 },
        { json: "endIndex", js: "endIndex", typ: 0 },
        { json: "paragraph", js: "paragraph", typ: r("TentacledParagraph") },
    ], false),
    "TentacledParagraph": o([
        { json: "elements", js: "elements", typ: a(r("FluffyElement")) },
        { json: "paragraphStyle", js: "paragraphStyle", typ: r("TentacledParagraphStyle") },
    ], false),
    "FluffyElement": o([
        { json: "startIndex", js: "startIndex", typ: 0 },
        { json: "endIndex", js: "endIndex", typ: 0 },
        { json: "inlineObjectElement", js: "inlineObjectElement", typ: u(undefined, r("FluffyInlineObjectElement")) },
        { json: "textRun", js: "textRun", typ: u(undefined, r("FluffyTextRun")) },
    ], false),
    "FluffyInlineObjectElement": o([
        { json: "inlineObjectId", js: "inlineObjectId", typ: "" },
        { json: "textStyle", js: "textStyle", typ: r("TentacledTextStyle") },
    ], false),
    "TentacledTextStyle": o([
        { json: "bold", js: "bold", typ: u(undefined, true) },
        { json: "italic", js: "italic", typ: u(undefined, true) },
        { json: "fontSize", js: "fontSize", typ: u(undefined, r("MarginBottom")) },
        { json: "weightedFontFamily", js: "weightedFontFamily", typ: u(undefined, r("WeightedFontFamily")) },
        { json: "underline", js: "underline", typ: u(undefined, true) },
        { json: "foregroundColor", js: "foregroundColor", typ: u(undefined, r("GroundColor")) },
        { json: "baselineOffset", js: "baselineOffset", typ: u(undefined, r("ColumnSeparatorStyle")) },
        { json: "backgroundColor", js: "backgroundColor", typ: u(undefined, r("GroundColor")) },
        { json: "link", js: "link", typ: u(undefined, r("Link")) },
    ], false),
    "Link": o([
        { json: "url", js: "url", typ: "" },
    ], false),
    "FluffyTextRun": o([
        { json: "content", js: "content", typ: "" },
        { json: "textStyle", js: "textStyle", typ: r("TentacledTextStyle") },
    ], false),
    "TentacledParagraphStyle": o([
        { json: "namedStyleType", js: "namedStyleType", typ: r("NamedStyleType") },
        { json: "alignment", js: "alignment", typ: u(undefined, "") },
        { json: "direction", js: "direction", typ: r("Direction") },
        { json: "borderBetween", js: "borderBetween", typ: r("Border") },
        { json: "borderTop", js: "borderTop", typ: r("Border") },
        { json: "borderBottom", js: "borderBottom", typ: r("Border") },
        { json: "borderLeft", js: "borderLeft", typ: r("Border") },
        { json: "borderRight", js: "borderRight", typ: r("Border") },
        { json: "shading", js: "shading", typ: r("Shading") },
    ], false),
    "PurpleTableCellStyle": o([
        { json: "rowSpan", js: "rowSpan", typ: 0 },
        { json: "columnSpan", js: "columnSpan", typ: 0 },
        { json: "backgroundColor", js: "backgroundColor", typ: r("CropPropertiesClass") },
        { json: "borderLeft", js: "borderLeft", typ: r("Border") },
        { json: "borderRight", js: "borderRight", typ: r("Border") },
        { json: "borderTop", js: "borderTop", typ: r("Border") },
        { json: "borderBottom", js: "borderBottom", typ: r("Border") },
        { json: "paddingLeft", js: "paddingLeft", typ: r("IndentEnd") },
        { json: "paddingRight", js: "paddingRight", typ: r("IndentEnd") },
        { json: "paddingTop", js: "paddingTop", typ: r("IndentEnd") },
        { json: "paddingBottom", js: "paddingBottom", typ: r("IndentEnd") },
        { json: "contentAlignment", js: "contentAlignment", typ: "" },
    ], false),
    "TableRowStyle": o([
        { json: "minRowHeight", js: "minRowHeight", typ: r("IndentEnd") },
    ], false),
    "TableStyle": o([
        { json: "tableColumnProperties", js: "tableColumnProperties", typ: a(r("TableColumnProperty")) },
    ], false),
    "TableColumnProperty": o([
        { json: "widthType", js: "widthType", typ: r("WidthType") },
        { json: "width", js: "width", typ: r("MarginBottom") },
    ], false),
    "FluffyTableCellStyle": o([
        { json: "rowSpan", js: "rowSpan", typ: 0 },
        { json: "columnSpan", js: "columnSpan", typ: 0 },
        { json: "backgroundColor", js: "backgroundColor", typ: r("CropPropertiesClass") },
        { json: "borderLeft", js: "borderLeft", typ: u(undefined, r("Border")) },
        { json: "borderRight", js: "borderRight", typ: u(undefined, r("Border")) },
        { json: "borderTop", js: "borderTop", typ: u(undefined, r("Border")) },
        { json: "borderBottom", js: "borderBottom", typ: u(undefined, r("Border")) },
        { json: "paddingLeft", js: "paddingLeft", typ: r("MarginBottom") },
        { json: "paddingRight", js: "paddingRight", typ: r("MarginBottom") },
        { json: "paddingTop", js: "paddingTop", typ: r("MarginBottom") },
        { json: "paddingBottom", js: "paddingBottom", typ: r("MarginBottom") },
        { json: "contentAlignment", js: "contentAlignment", typ: "" },
    ], false),
    "DocumentStyle": o([
        { json: "background", js: "background", typ: r("Background") },
        { json: "pageNumberStart", js: "pageNumberStart", typ: 0 },
        { json: "marginTop", js: "marginTop", typ: r("MarginBottom") },
        { json: "marginBottom", js: "marginBottom", typ: r("MarginBottom") },
        { json: "marginRight", js: "marginRight", typ: r("MarginBottom") },
        { json: "marginLeft", js: "marginLeft", typ: r("MarginBottom") },
        { json: "pageSize", js: "pageSize", typ: r("Size") },
    ], false),
    "Background": o([
        { json: "color", js: "color", typ: r("CropPropertiesClass") },
    ], false),
    "Size": o([
        { json: "height", js: "height", typ: r("MarginBottom") },
        { json: "width", js: "width", typ: r("MarginBottom") },
    ], false),
    "InlineObject": o([
        { json: "inlineObjectProperties", js: "inlineObjectProperties", typ: r("InlineObjectProperties") },
    ], false),
    "InlineObjectProperties": o([
        { json: "embeddedObject", js: "embeddedObject", typ: r("EmbeddedObject") },
    ], false),
    "EmbeddedObject": o([
        { json: "imageProperties", js: "imageProperties", typ: r("ImageProperties") },
        { json: "description", js: "description", typ: u(undefined, "") },
        { json: "embeddedObjectBorder", js: "embeddedObjectBorder", typ: r("EmbeddedObjectBorder") },
        { json: "size", js: "size", typ: r("Size") },
        { json: "marginTop", js: "marginTop", typ: r("MarginBottom") },
        { json: "marginBottom", js: "marginBottom", typ: r("MarginBottom") },
        { json: "marginRight", js: "marginRight", typ: r("MarginBottom") },
        { json: "marginLeft", js: "marginLeft", typ: r("MarginBottom") },
    ], false),
    "EmbeddedObjectBorder": o([
        { json: "color", js: "color", typ: r("ForegroundColorClass") },
        { json: "width", js: "width", typ: r("IndentEnd") },
        { json: "dashStyle", js: "dashStyle", typ: r("DashStyle") },
        { json: "propertyState", js: "propertyState", typ: "" },
    ], false),
    "ImageProperties": o([
        { json: "contentUri", js: "contentUri", typ: "" },
        { json: "cropProperties", js: "cropProperties", typ: r("CropPropertiesClass") },
    ], false),
    "NamedStyles": o([
        { json: "styles", js: "styles", typ: a(r("Style")) },
    ], false),
    "Style": o([
        { json: "namedStyleType", js: "namedStyleType", typ: "" },
        { json: "textStyle", js: "textStyle", typ: r("StyleTextStyle") },
        { json: "paragraphStyle", js: "paragraphStyle", typ: r("StyleParagraphStyle") },
    ], false),
    "StyleParagraphStyle": o([
        { json: "namedStyleType", js: "namedStyleType", typ: r("NamedStyleType") },
        { json: "alignment", js: "alignment", typ: u(undefined, "") },
        { json: "lineSpacing", js: "lineSpacing", typ: u(undefined, 0) },
        { json: "direction", js: "direction", typ: r("Direction") },
        { json: "spacingMode", js: "spacingMode", typ: u(undefined, "") },
        { json: "spaceAbove", js: "spaceAbove", typ: r("MarginBottom") },
        { json: "spaceBelow", js: "spaceBelow", typ: r("MarginBottom") },
        { json: "borderBetween", js: "borderBetween", typ: u(undefined, r("Border")) },
        { json: "borderTop", js: "borderTop", typ: u(undefined, r("Border")) },
        { json: "borderBottom", js: "borderBottom", typ: u(undefined, r("Border")) },
        { json: "borderLeft", js: "borderLeft", typ: u(undefined, r("Border")) },
        { json: "borderRight", js: "borderRight", typ: u(undefined, r("Border")) },
        { json: "indentFirstLine", js: "indentFirstLine", typ: u(undefined, r("IndentEnd")) },
        { json: "indentStart", js: "indentStart", typ: u(undefined, r("IndentEnd")) },
        { json: "indentEnd", js: "indentEnd", typ: u(undefined, r("IndentEnd")) },
        { json: "keepLinesTogether", js: "keepLinesTogether", typ: u(undefined, true) },
        { json: "keepWithNext", js: "keepWithNext", typ: u(undefined, true) },
        { json: "avoidWidowAndOrphan", js: "avoidWidowAndOrphan", typ: u(undefined, true) },
        { json: "shading", js: "shading", typ: u(undefined, r("Shading")) },
    ], false),
    "StyleTextStyle": o([
        { json: "bold", js: "bold", typ: u(undefined, true) },
        { json: "italic", js: "italic", typ: u(undefined, true) },
        { json: "fontSize", js: "fontSize", typ: u(undefined, r("MarginBottom")) },
        { json: "foregroundColor", js: "foregroundColor", typ: u(undefined, r("GroundColor")) },
        { json: "weightedFontFamily", js: "weightedFontFamily", typ: u(undefined, r("WeightedFontFamily")) },
    ], false),
    "ColumnSeparatorStyle": [
        "NONE",
    ],
    "Unit": [
        "PT",
    ],
    "FontFamily": [
        "Arial",
        "Georgia",
        "Roboto",
        "Verdana",
    ],
    "DashStyle": [
        "SOLID",
    ],
    "Direction": [
        "LEFT_TO_RIGHT",
    ],
    "NamedStyleType": [
        "HEADING_1",
        "HEADING_2",
        "NORMAL_TEXT",
    ],
    "WidthType": [
        "FIXED_WIDTH",
    ],
};

module.exports = {
    "testToJson": testToJson,
    "toTest": toTest,
};

console.log(typeMap);
